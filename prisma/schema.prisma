generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  spaces         Space[]
  teams          TeamMember[]
  resetToken        String?   @db.String
  resetTokenExpiry  DateTime?
}

model Space {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  spaceId       String
  name          String
  accessToken   String
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  teams         Team[]

  @@unique([userId, spaceId])
}

model Team {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  spaceId   String      @db.ObjectId
  space     Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  members   TeamMember[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model TeamMember {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String    @db.ObjectId
  userId    String    @db.ObjectId
  role      Role      @default(VIEWER)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([teamId, userId])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}